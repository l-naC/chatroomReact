{"version":3,"sources":["serviceWorker.js","components/Chatroom.js","views/Home.js","views/About.js","index.js"],"names":["Boolean","window","location","hostname","match","Chatroom","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateMessage","bind","assertThisInitialized","submitMessage","loginMessage","logoutMessage","loadFile","state","user","messages","tabMessages","_this2","console","log","firebase","ref","on","snapshot","currentMessages","values","val","setState","onAuthStateChanged","event","target","value","nextMessage","ts","Date","getTime","uid","displayName","message","push","preventDefault","googleAuthProvider","GoogleAuthProvider","addScope","signInWithPopup","signOut","_this3","files","file","img","Image","src","URL","createObjectURL","onload","canvas","refs","getContext","drawImage","width","height","toBlob","blob","child","name","put","then","getDownloadURL","downloadURL","currentMessage","markedDown","map","item","react_default","a","createElement","key","onClick","onSubmit","type","onChange","placeholder","entry","marked","toString","sanitize","Component","Home","components_Chatroom","About","className","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","Link","to","concat","process","Main","Switch","Route","exact","path","component","ReactDOM","render","BrowserRouter","basename","src_Header","src_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1832064.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport '../App.css';\nimport * as firebase from 'firebase';\nimport marked from 'marked'\nclass Chatroom extends Component {\n    constructor(){\n        super()\n        this.updateMessage = this.updateMessage.bind(this)\n        this.submitMessage = this.submitMessage.bind(this)\n        this.loginMessage = this.loginMessage.bind(this)\n        this.logoutMessage = this.logoutMessage.bind(this)\n        this.loadFile = this.loadFile.bind(this)\n        this.state = {\n            user: false,\n            messages: '',\n            tabMessages: []\n        }\n    }\n\n    componentDidMount() {\n        console.log('componentDiMount')\n        firebase.database().ref('messages/').on('value', (snapshot) => {\n            let currentMessages = Object.values(snapshot.val())\n            if (currentMessages != null){\n                this.setState({\n                    tabMessages: currentMessages\n                })\n            }\n        })\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in.\n                this.setState({\n                    user: user\n                })\n            } else {\n                // No user is signed in.\n                this.setState({\n                    user: false\n                })\n            }\n        });\n    }\n\n    updateMessage(event){\n        console.log('updateMessage: '+event.target.value)\n        this.setState({\n            messages: event.target.value\n        })\n    }\n\n    submitMessage(event){\n        console.log('submitMessage: '+this.state.messages)\n        if (this.state.user){\n            const nextMessage = {\n                ts: new Date().getTime(),\n                uid: this.state.user.uid,\n                displayName: this.state.user.displayName,\n                message: this.state.messages\n            }\n            firebase.database().ref('messages/').push(nextMessage)\n        }\n        event && event.preventDefault()\n    }\n    loginMessage(){\n        let googleAuthProvider = new firebase.auth.GoogleAuthProvider()\n        googleAuthProvider.addScope('https://www.googleapis.com/auth/plus.login')\n        //firebase.auth().languageCode = 'fr'\n        firebase.auth().signInWithPopup(googleAuthProvider)\n    }\n    logoutMessage(){\n        firebase.auth().signOut()\n    }\n    loadFile(event){\n        if(event.target.files[0]) {\n            const file = event.target.files[0];\n            //const reader = new FileReader();\n            // TODO : check si c'est une image\n            let img = new Image();\n            img.src = URL.createObjectURL(file);\n            img.onload = () => {\n                let canvas = this.refs.canvas\n                let ctx = canvas.getContext('2d')\n                ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, 200, 100)\n                //canvas to blod convert\n                canvas.toBlob(blob => {\n                    // inject into storage then send msg\n                    firebase.storage().ref('images/').child(file.name)\n                        .put(blob)\n                        .then(snapshot => {\n                            // supdate input with blod url\n                            snapshot.ref.getDownloadURL()\n                                .then(downloadURL => {\n                                    this.setState({\n                                        message: \"![prout](\" + downloadURL + \")\"\n                                    })\n                                    console.log(downloadURL)\n                                    this.submitMessage()\n                                    // TODO : cleanup canvas && fileinput\n                                });\n                        })\n                }, 'image/webp', 0.8)\n            };\n        }\n    }\n    get markedDown(){\n        return (this.state.tabMessages).map((entry) => {\n            return ({\n                ts: entry.ts,\n                uid: entry.uid,\n                displayName: entry.displayName,\n                message: (entry.message) ? marked((entry.message).toString(), {sanitize: true}) : ''\n            })\n        })\n    }\n    render() {\n        const currentMessage = this.markedDown.map((item) => {\n            return (\n                <li key={item.ts}>\n                    {item.ts} : {item.displayName}\n                    <div>{item.message}</div>\n                </li>\n            )\n        })\n        return (\n            <div>\n                <button onClick={this.loginMessage}>login</button>\n                { (this.state.user) ? <button onClick={this.logoutMessage}>logout</button> : '' }\n                <ul>\n                    {currentMessage}\n                </ul>\n                <canvas ref=\"canvas\" />\n                <form onSubmit={this.submitMessage}>\n                    <input type=\"file\" ref=\"fileInput\" onChange={this.loadFile}/>\n                    <input onChange={this.updateMessage} type=\"text\" placeholder=\"Message\"/>\n                    <br/>\n                    <button type=\"submit\" value=\"submit\">Submit Message</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Chatroom;\n\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Chatroom from '../components/Chatroom'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                This is a Chatroom\n                <Chatroom/>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n\n","import React, { Component } from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n            <div className=\"About\">\n                <header className=\"\">\n                    <p>\n                        Edit and save to reload.\n                    </p>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default About;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Route, BrowserRouter, Link, Switch} from 'react-router-dom';\nimport Home from './views/Home';\nimport About from './views/About';\nimport * as firebase from 'firebase';\n\n// Initialize Firebase\nconst config = {\n    apiKey: \"AIzaSyCe5ZRFsJUzpN761c55q2A0KJifrIaAWH0\",\n    authDomain: \"chat-room-70b95.firebaseapp.com\",\n    databaseURL: \"https://chat-room-70b95.firebaseio.com\",\n    projectId: \"chat-room-70b95\",\n    storageBucket: \"chat-room-70b95.appspot.com\",\n    messagingSenderId: \"317799036206\"\n};\n// eslint-disable-next-line to ignore the next line\nfirebase.initializeApp(config);\n\nconst Header = () => (\n    <nav className=\"navbar\">\n        <ul className=\"navbar-list clearfix\">\n            <li className=\"navbar-item\"><Link className=\"navbar-link\" to={`${process.env.PUBLIC_URL}/`}>Home</Link></li>\n            <li className=\"navbar-item\"><Link className=\"navbar-link\" to={`${process.env.PUBLIC_URL}/about`}>About</Link></li>\n        </ul>\n    </nav>\n)\n\nconst Main = () => (\n    <main className=\"container\">\n        <Switch>\n            <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home}/>\n            <Route exact path={`${process.env.PUBLIC_URL}/about`} component={About}/>\n        </Switch>\n    </main>\n)\n\nconst App = () => (\n    <div className=\"\">\n        <Header/>\n        <Main/>\n    </div>\n)\n\nReactDOM.render((\n    <BrowserRouter basename={'/'}>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}